-- Defining the whitelist table with allowed Roblox UserIDs
local whitelist = {
    8625682817, -- Replace with actual UserID
    8625682817, -- Replace with actual UserID
    -- Add more UserIDs as needed
}

-- Creating a function to check if a player is whitelisted
local function isWhitelisted(userId)
    for _, id in pairs(whitelist) do
        if id == userId then
            return true
        end
    end
    return false
end

-- Connecting to the PlayerAdded event to check players when they join
game.Players.PlayerAdded:Connect(function(player)
    -- Ensure the UserId is retrieved correctly
    local userId = player.UserId
    if not userId then
        -- Fallback in case UserId is not immediately available
        player:Kick("Error: Unable to verify UserID. Please rejoin.")
        return
    end
    
    -- Check if the player is whitelisted
    if not isWhitelisted(userId) then
        -- Kicking player if not whitelisted with a message
        player:Kick("Not whitelisted! You are not authorized to join this game.")
    end
    -- If whitelisted, no action is taken, and the player remains in the game
end)

-- Optional: Handle edge cases for players already in the game when script runs
for _, player in pairs(game.Players:GetPlayers()) do
    local userId = player.UserId
    if not userId then
        player:Kick("Error: Unable to verify UserID. Please rejoin.")
    elseif not isWhitelisted(userId) then
        player:Kick("Not whitelisted! You are not authorized to join this game.")
    end
end
